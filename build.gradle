/*
 * Copyright 2018 dorkbox, llc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.nio.file.Paths
import java.time.Instant

buildscript {
    // load properties from custom location
    def propsFile = Paths.get("${projectDir}/../../gradle.properties").toAbsolutePath().normalize().toFile()
    println("Loading custom property data from: ${propsFile}")

    def props = new Properties()
    propsFile.withInputStream {props.load(it)}
    props.each {key, val -> project.ext.set(key, val)}

    // for license sources
    repositories {
        maven {url "https://plugins.gradle.org/m2/"}
    }
    dependencies {
        classpath "gradle.plugin.com.dorkbox:Licensing:1.2.2"
        classpath "gradle.plugin.com.dorkbox:Licensing:1.2.2:sources"
    }
}


plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'

    id "org.jetbrains.kotlin.jvm" version "1.2.60"

    // close and release on sonatype
    id 'io.codearte.nexus-staging' version '0.11.0'

    id "com.dorkbox.CrossCompile" version "1.0.0"
}

apply plugin: "com.dorkbox.Licensing"


project.description = 'Java Semantic Versioning with patch info exclusion'
project.group = 'com.dorkbox'
project.version = '1.0'

project.ext.name = 'Version'
project.ext.id = 'Version'
project.ext.url = 'https://git.dorkbox.com/dorkbox/Version'


sourceCompatibility = 1.6
targetCompatibility = 1.6


licensing {
    license(License.MIT) {
        author 'dorkbox, llc'
        author 'G. Richard Bellamy'
        author 'Kenduck'
        author 'Larry Bordowitz <lbordowitz@yahoo-inc.com>'
        author 'Martin RÃ¼egg <martin.rueegg@bristolpound.org> <martin.rueegg@metaworx.ch>'
        author 'Zafar Khaja <zafarkhaja@gmail.com>'
        url project.ext.url
        note project.description
    }
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

tasks.withType(Jar) {
    duplicatesStrategy DuplicatesStrategy.FAIL

    manifest {
        attributes['Implementation-Version'] = project.version
        attributes['Build-Date'] = Instant.now().toString()
    }
}

repositories {
    jcenter()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version:'4.12'
}

sourceSets {
    main {
        java {
            setSrcDirs Collections.singletonList('src')
        }
    }

    test {
        java {
            setSrcDirs Collections.singletonList('test')
        }
    }
}

/////////////////////////////
////    Maven Publishing + Release
/////////////////////////////
task sourceJar(type: Jar) {
    description = "Creates a JAR that contains the source code."

    from sourceSets.main.allSource

    classifier = "sources"
}

task javaDocJar(type: Jar) {
    description = "Creates a JAR that contains the javadocs."

    classifier = "javadoc"
}

// for testing, we don't publish to maven central, but only to local maven
publishing {
    publications {
        SemanticVersioning(MavenPublication) {
            from components.java

            artifact(javaDocJar)
            artifact(sourceJar)

            groupId project.group
            artifactId project.ext.id
            version project.version

            pom {
                withXml {
                    // eliminate logback compile dependencies (no need in maven central POMs)
                    def root = asNode()

                    root.dependencies.'*'.findAll() {
                        it.groupId.text() == "ch.qos.logback" && it.artifactId.text() == "logback-classic"
                    }.each() {
                        it.parent().remove(it)
                    }
                }

                name = project.ext.id
                url = project.ext.url
                description = project.description

                issueManagement {
                    url = "${project.ext.url}/issues".toString()
                    system = 'Gitea Issues'
                }

                organization {
                    name = 'dorkbox, llc'
                    url = 'https://dorkbox.com'
                }

                developers {
                    developer {
                        name = 'dorkbox, llc'
                        email = 'email@dorkbox.com'
                    }
                }

                scm {
                    url = project.ext.url
                    connection = "scm:${project.ext.url}.git".toString()
                }
            }
        }
    }

    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

signing {
    required {hasProperty('sonatypeUsername')}
    sign publishing.publications.SemanticVersioning
}

// we don't use maven with the plugin (it's uploaded separately to gradle plugins)
tasks.withType(PublishToMavenRepository) {
    onlyIf {
        repository == publishing.repositories.maven && publication == publishing.publications.SemanticVersioning
    }
}
tasks.withType(PublishToMavenLocal) {
    onlyIf {
        publication == publishing.publications.SemanticVersioning
    }
}
